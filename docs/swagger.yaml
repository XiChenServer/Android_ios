definitions:
  servers.AddressEntry:
    properties:
      city:
        description: 城市
        type: string
      contact:
        description: 联系人及其信息
        type: string
      country:
        description: 国家
        type: string
      identity:
        description: 唯一标识
        type: string
      post_code:
        description: 邮件地址
        type: string
      province:
        description: 省份
        type: string
      street:
        description: 街道
        type: string
    type: object
  servers.Basic:
    properties:
      email:
        type: string
      phone_number:
        type: string
    type: object
  servers.User:
    properties:
      account:
        description: 账号
        type: string
      address:
        description: 地址列表
        items:
          $ref: '#/definitions/servers.AddressEntry'
        type: array
      avatar:
        description: 头像链接
        type: string
      email:
        description: 电子邮件
        type: string
      file_base64:
        type: string
      name:
        type: string
      nickname:
        description: 昵称
        type: string
      password:
        description: 密码
        type: string
      phone_number:
        description: 电话号码
        type: string
      score:
        description: 评分
        type: integer
      user_identity:
        description: 用户身份信息
        type: string
      verification_code:
        description: 验证码
        type: string
      wechat_number:
        description: 微信号
        type: string
    type: object
  servers.UserModify:
    properties:
      email:
        type: string
      name:
        type: string
      nickname:
        description: 昵称
        type: string
      password:
        description: 密码
        type: string
      wechat_number:
        description: 微信号
        type: string
    type: object
host: 8.130.86.26:13000
info:
  contact:
    email: support@swagger.io
    name: phone_number 15294440097
    url: http://www.swagger.io/support
  description: 用于家畜交易
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: 牧牛流马(Herding_cattle_and_straying_horses)
  version: "1.0"
paths:
  /admin/add_new_category_info:
    post:
      consumes:
      - application/json
      description: 根据传入的名称创建新的分类
      parameters:
      - description: 分类名称
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "新的分类创建完成"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 添加新的分类
      tags:
      - 管理员私有方法
  /admin/add_new_son_category_info:
    post:
      consumes:
      - application/json
      description: 根据传入的名称创建新的分类
      parameters:
      - description: 分类名称
        in: query
        name: name
        required: true
        type: string
      - description: 父分类的identity
        in: query
        name: identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "新的分类创建完成"}'
          schema:
            type: string
        "404":
          description: 'code": 404, "msg": "父分类没有找到"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 添加新的分类
      tags:
      - 管理员私有方法
  /admin/get/all_list_categories:
    get:
      consumes:
      - application/json
      description: 获取系统中所有的分类信息
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "获取分类信息成功", "data": [分类信息列表]}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 查看所有分类
      tags:
      - 管理员私有方法
  /chat/basic/create:
    post:
      consumes:
      - application/json
      description: 从现有用户基本信息中创建用户聊天账号信息
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "用户聊天账号信息创建成功"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 创建用户聊天账号信息
      tags:
      - 用户聊天基础
  /get/one_product_info:
    post:
      description: 根据商品的唯一标识符获取特定商品的详细信息。
      parameters:
      - description: 商品的唯一标识符
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "成功获取商品信息", "data": CommodityBasic}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 获取特定商品的详细信息
  /get/product/by_category:
    post:
      description: 根据kind_identity获取特定类别下的所有商品
      parameters:
      - description: Kind Identity
        in: query
        name: kind_identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "获取该类型下的所有商品", "count": 10, "list": []}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 获取特定类别的所有商品
      tags:
      - 商品
  /get/user_all_pro_list:
    post:
      description: 获取指定用户的所有商品信息
      parameters:
      - description: 用户唯一标识
        in: query
        name: user_identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"获取商品所有信息","data":{"user_products":{}}}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 获取用户所有商品信息
      tags:
      - 商品
  /index:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - 首页
  /products/simple_info:
    get:
      description: Retrieve a list of all products with basic information and categories.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: 获取所有商品的简单信息
  /search/product:
    post:
      description: 根据关键字搜索商品信息
      parameters:
      - description: 搜索关键字
        in: query
        name: data
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "查找信息成功", "data": []models.CommodityBasic}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": "401", "msg": "未授权"}'
          schema:
            type: string
        "404":
          description: 'code": "404", "msg": "商品不存在"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 商品搜索
      tags:
      - 商品
  /send_email_code:
    post:
      description: Send an email verification code to the specified email address
      parameters:
      - description: Email address to send the verification code to
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"验证码已经成功发送"}
          schema:
            type: string
        "400":
          description: code":400,"msg":"请求参数错误"}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 发送邮箱验证码
      tags:
      - 公共方法
  /send_phone_code:
    post:
      consumes:
      - application/json
      description: 向指定手机号发送验证码。
      parameters:
      - description: 接收验证码的手机号
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/servers.Basic'
      produces:
      - application/json
      responses:
        "201":
          description: code":201,"msg":"验证码已经成功发送"}
          schema:
            type: string
        "400":
          description: code":400,"msg":"请求无效。服务器无法理解请求"}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 发送手机验证码
      tags:
      - 公共方法
  /user/adds/products:
    post:
      description: 允许用户添加具有详细信息和媒体文件的商品
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - collectionFormat: csv
        description: 商品类型
        in: formData
        items:
          type: string
        name: type
        required: true
        type: array
      - description: 商品标题
        in: formData
        name: title
        required: true
        type: string
      - description: 商品数量
        in: formData
        name: number
        required: true
        type: string
      - description: 商品信息
        in: formData
        name: information
        required: true
        type: string
      - description: 商品价格
        in: formData
        name: price
        required: true
        type: string
      - description: 是否拍卖
        in: formData
        name: is_auction
        type: string
      - description: 街道
        in: formData
        name: street
        type: string
      - description: 城市
        in: formData
        name: city
        type: string
      - description: 国家
        in: formData
        name: country
        type: string
      - description: 省份
        in: formData
        name: province
        type: string
      - description: 联系人及其信息
        in: formData
        name: contact
        type: string
      - description: 邮件地址
        in: formData
        name: post_code
        type: string
      - description: 商品图片
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "成功创建商品", "data": CommodityBasic}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "401":
          description: 'code": "401", "message": "未授权"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 用户添加商品
      tags:
      - 用户私有方法
  /user/changes/mobile/phone:
    post:
      description: 根据用户身份标识更换用户的手机号码。
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 要更换的手机号码
        in: formData
        name: phone_number
        required: true
        type: string
      - description: 验证码
        in: formData
        name: verification_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "手机号更换成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: string
        "403":
          description: 'code": 403, "msg": "禁止访问"}'
          schema:
            type: string
        "404":
          description: 'code": 404, "msg": "未找到资源"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 更换用户手机号
      tags:
      - 用户私有方法
  /user/chat/redisMsg:
    post:
      consumes:
      - application/json
      description: 从Redis中获取两个用户之间的聊天消息。
      operationId: getRedisMessages
      parameters:
      - description: 用户A的ID
        in: formData
        name: userIdA
        required: true
        type: integer
      - description: 用户B的ID
        in: formData
        name: userIdB
        required: true
        type: integer
      - description: 消息起始位置
        in: formData
        name: start
        required: true
        type: integer
      - description: 消息结束位置
        in: formData
        name: end
        required: true
        type: integer
      - description: 是否反转消息顺序
        in: formData
        name: isRev
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: 成功返回
          schema:
            type: string
      summary: 从Redis获取用户聊天消息
      tags:
      - 用户私有方法
  /user/chat/sendMsg:
    get:
      description: 建立WebSocket连接并发送消息。
      operationId: sendWebSocketMessage
      produces:
      - text/plain
      responses:
        "101":
          description: WebSocket连接已建立
          schema:
            type: string
        "403":
          description: WebSocket连接失败
          schema:
            type: string
      summary: 通过WebSocket发送消息
      tags:
      - 用户私有方法
  /user/chat/sendUserMsg:
    get:
      consumes:
      - application/json
      description: 通过WebSocket向指定用户发送消息。
      operationId: sendUserMsg
      parameters:
      - description: 接收者的用户ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: 发送用户消息
      tags:
      - 用户私有方法
  /user/chat/upload:
    post:
      consumes:
      - multipart/form-data
      description: 上传文件到指定的存储位置（本地或其他存储服务）。
      operationId: upload
      parameters:
      - description: 上传的文件
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses: {}
      summary: 上传文件
      tags:
      - 用户私有方法
  /user/collect/product:
    post:
      description: 用户收藏商品
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 商品标识
        in: query
        name: commodity_identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "收藏成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "message": "未授权"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 收藏商品
      tags:
      - 用户私有方法
  /user/delete/address:
    delete:
      description: 根据用户身份标识删除用户的地址信息。
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 要删除的地址身份标识
        in: formData
        name: identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "地址删除成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: string
        "403":
          description: 'code": 403, "msg": "禁止访问"}'
          schema:
            type: string
        "404":
          description: 'code": 404, "msg": "未找到资源"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 删除用户地址
      tags:
      - 用户私有方法
  /user/deletes/products:
    post:
      description: 允许用户从其商品列表中删除商品
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 商品ID
        in: query
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "成功删除商品"}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "401":
          description: 'code": "401", "message": "未授权"}'
          schema:
            type: string
        "404":
          description: 'code": "404", "msg": "商品不存在"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 用户删除商品
      tags:
      - 用户私有方法
  /user/get/avatar:
    get:
      consumes:
      - application/json
      description: 从阿里云服务器获取用户头像，需要提供有效的用户身份验证令牌。
      parameters:
      - default: "123"
        description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: string
        "403":
          description: 'code": 403, "msg": "禁止访问"}'
          schema:
            type: string
        "404":
          description: 'code": 404, "msg": "文件不存在"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取用户头像
      tags:
      - 用户私有方法
  /user/get/avatar/local:
    post:
      description: 获取用户头像文件名等信息
      operationId: user-get-avatar-local
      parameters:
      - description: 用户账号
        in: query
        name: account
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: string
        "403":
          description: 'code": 403, "msg": "禁止访问"}'
          schema:
            type: string
        "404":
          description: 'code": 404, "msg": "文件不存在"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 获取用户头像信息
  /user/get/collect/pro:
    get:
      description: 获取用户收藏的商品数据
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取收藏的商品数据
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "message": "未授权"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 获取用户收藏的商品数据
      tags:
      - 用户私有方法
  /user/get/info:
    get:
      consumes:
      - application/json
      description: 解析用户信息，验证用户身份，并返回用户信息。
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "获取信息成功", "data": {用户信息}}'
          schema:
            type: json
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: json
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: json
        "404":
          description: 'code": 404, "msg": "用户不存在"}'
          schema:
            type: json
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: json
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: json
      security:
      - ApiKeyAuth: []
      summary: 获取用户信息
      tags:
      - 用户私有方法
  /user/get/like/pro:
    get:
      description: 获取用户点赞的商品数据
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取点赞的商品数据
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "message": "未授权"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 获取用户点赞的商品数据
      tags:
      - 用户私有方法
  /user/like/product:
    post:
      description: 用户点赞商品
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 商品标识
        in: query
        name: commodity_identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "点赞成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "message": "未授权"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 点赞商品
      tags:
      - 用户私有方法
  /user/login/password:
    post:
      consumes:
      - application/json
      description: 用户通过账号和密码进行登录，如果账号未注册、密码错误或其他错误将返回相应的错误信息。
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/servers.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "登录成功", "data": {"token": "用户token"}}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "409":
          description: 'code": "409", "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 用户登录（密码）
      tags:
      - 用户方法
  /user/login/phone:
    post:
      consumes:
      - application/json
      description: 用户通过手机号和验证码进行登录，如果手机号未注册、验证码错误或其他错误将返回相应的错误信息。
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/servers.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "登录成功", "data": {"token": "用户token"}}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "409":
          description: 'code": "409", "msg": "该手机号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 用户登录（验证码）
      tags:
      - 用户方法
  /user/login/phone_and_password:
    post:
      consumes:
      - application/json
      description: 用户通过手机号和密码进行登录
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/servers.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": "200", "msg": "登录成功", "data": {"token": "jwt_token_here"}}'
          schema:
            type: json
        "400":
          description: '{"code": 400, "msg": "手机号或密码错误"}'
          schema:
            type: json
        "401":
          description: '{"code": 401, "msg": "该手机号没有被注册"}'
          schema:
            type: json
        "500":
          description: '{"code": 500, "msg": "服务器内部错误"}'
          schema:
            type: json
      summary: 用户登录（使用手机号和密码）
      tags:
      - 用户方法
  /user/modifies/products:
    post:
      description: 允许用户修改商品详细信息和媒体文件
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 商品ID
        in: query
        name: productID
        required: true
        type: string
      - collectionFormat: csv
        description: 商品类型
        in: formData
        items:
          type: string
        name: type
        required: true
        type: array
      - description: 商品标题
        in: formData
        name: title
        required: true
        type: string
      - description: 商品数量
        in: formData
        name: number
        required: true
        type: string
      - description: 商品信息
        in: formData
        name: information
        required: true
        type: string
      - description: 商品价格
        in: formData
        name: price
        required: true
        type: string
      - description: 是否拍卖
        in: formData
        name: is_auction
        type: string
      - description: 街道
        in: formData
        name: street
        type: string
      - description: 城市
        in: formData
        name: city
        type: string
      - description: 国家
        in: formData
        name: country
        type: string
      - description: 省份
        in: formData
        name: province
        type: string
      - description: 联系人及其信息
        in: formData
        name: contact
        type: string
      - description: 邮件地址
        in: formData
        name: post_code
        type: string
      - description: 商品图片
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "成功修改商品", "data": CommodityBasic}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "401":
          description: 'code": "401", "message": "未授权"}'
          schema:
            type: string
        "404":
          description: 'code": "404", "msg": "商品不存在"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 用户修改商品信息
      tags:
      - 用户私有方法
  /user/modify/info:
    post:
      consumes:
      - application/json
      description: 根据提供的JSON请求体修改用户信息
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 需要修改的用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/servers.UserModify'
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"修改信息成功"}
          schema:
            type: string
        "400":
          description: code":400,"msg":"请求无效。服务器无法理解请求"}
          schema:
            type: string
        "401":
          description: code":401,"msg":"未授权"}
          schema:
            type: string
        "403":
          description: code":403,"msg":"请求错误"}
          schema:
            type: string
        "404":
          description: code":404,"msg":"该账号没有被注册"}
          schema:
            type: string
        "409":
          description: code":409,"msg":"请求错误"}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 修改用户信息
  /user/order/create:
    post:
      description: 创建订单接口
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 卖家身份
        in: query
        name: sellerIdentity
        required: true
        type: string
      - description: 商品ID
        in: query
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"订单创建完成"}
          schema:
            type: string
        "400":
          description: code":400,"msg":"卖家未拥有该商品"}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 创建订单
      tags:
      - 订单
  /user/order/delete:
    post:
      consumes:
      - application/json
      description: 删除订单接口
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 订单身份
        in: query
        name: orderIdentity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"订单删除成功"}
          schema:
            type: string
        "400":
          description: code":400,"msg":"订单ID参数错误"}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 删除订单
      tags:
      - 订单
  /user/order/find/AllBuyOrder:
    get:
      description: 查询用户的所有购买订单
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"成功获取购买订单","orders":{}}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 查询用户的所有购买订单
      tags:
      - 订单
  /user/order/find/AllSellOrders:
    get:
      description: 查询所有出售订单
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: code":200,"msg":"成功获取所有出售订单","orders":{}}
          schema:
            type: string
        "500":
          description: code":500,"msg":"服务器内部错误"}
          schema:
            type: string
      summary: 查询所有出售订单
      tags:
      - 订单
  /user/register/phone:
    post:
      consumes:
      - application/json
      description: 用户通过手机号进行注册，如果手机号已存在或验证码错误将返回相应的错误信息。
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/servers.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'code": "200", "msg": "注册成功", "data": {"nickname": "用户昵称",
            "account": "用户账号": ""}}'
          schema:
            type: string
        "400":
          description: 'code": "400", "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "409":
          description: 'code": "409", "msg": "该手机号已经注册"}'
          schema:
            type: string
        "500":
          description: 'code": "500", "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 用户注册
      tags:
      - 用户方法
  /user/uncollect/product:
    post:
      description: 用户取消收藏商品
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 商品标识
        in: query
        name: commodity_identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "取消收藏成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "message": "未授权"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 取消收藏商品
      tags:
      - 用户私有方法
  /user/unlike/product:
    post:
      description: 用户取消点赞商品
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 商品标识
        in: query
        name: commodity_identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "取消点赞成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "message": "未授权"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 取消点赞商品
      tags:
      - 用户私有方法
  /user/upload/address:
    post:
      consumes:
      - application/json
      description: 通过解析用户信息和JSON请求体，将地址信息上传到用户信息中。
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 要上传的地址信息,identity是不需要填写的，post_code可以写，也可以不写
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/servers.AddressEntry'
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "地址添加成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求无效。服务器无法理解请求"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: string
        "409":
          description: 'code": 409, "msg": "该账号没有被注册"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      summary: 向用户上传地址信息
      tags:
      - 用户私有方法
  /user/uploads/avatar:
    post:
      consumes:
      - application/json
      description: 处理用户上传头像的请求，需要提供有效的用户身份验证令牌。
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: 用户头像文件
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'code": 200, "msg": "文件上传成功"}'
          schema:
            type: string
        "400":
          description: 'code": 400, "msg": "请求错误"}'
          schema:
            type: string
        "401":
          description: 'code": 401, "msg": "未授权"}'
          schema:
            type: string
        "403":
          description: 'code": 403, "msg": "禁止访问"}'
          schema:
            type: string
        "413":
          description: 'code": 413, "msg": "文件大小超出限制"}'
          schema:
            type: string
        "500":
          description: 'code": 500, "msg": "服务器内部错误"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 上传用户头像
      tags:
      - 用户私有方法
swagger: "2.0"
